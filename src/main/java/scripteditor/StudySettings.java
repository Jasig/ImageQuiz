/**
 * Licensed to Apereo under one or more contributor license
 * agreements. See the NOTICE file distributed with this work
 * for additional information regarding copyright ownership.
 * Apereo licenses this file to you under the Apache License,
 * Version 2.0 (the "License"); you may not use this file
 * except in compliance with the License. You may obtain a
 * copy of the License at:
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on
 * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied. See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
/*
 * StudySettings.java
 *
 * Created on May 26, 2006, 6:15 PM
 */

package scripteditor;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import javax.swing.*;

/**
 *
 * @author  Moz123
 */
public class StudySettings extends javax.swing.JDialog {
    double mDelay;
    //double mPause;
    boolean mScriptMode = false;
    boolean mContinue = false;
    String mTaxaLevel;
    
    /** Creates new form StudySettings */
    public StudySettings(double delayTime, boolean scriptMode, String taxanomicLevel, boolean showFamily, boolean press) {
        initComponents();
        addEscapeListener(this);//Added by preethy on 20/03/2012
        mDelay = delayTime;
        mScriptMode = scriptMode;
        mTaxaLevel = taxanomicLevel;
        this.jSlider1.setMinimum(5);
        this.jSlider1.setMaximum(40);
        jSlider1.setValue((int)(delayTime * 10));
//        tfDelayTime.setText(Double.toString(delayTime));
//        tfPause.setText(Double.toString(pause));
        
//        if(scriptMode)
//        {
//             this.lblScriptMode.setText("Yes");
//        }
//        else{
//            
//            this.lblScriptMode.setText("No");
//        }
        
        //If program is in script mode, disable controls
//        if(scriptMode)// || runMode) {
//        {
        this.ckShowFamily.setSelected(showFamily);
        this.ckKeyPress.setSelected(press);
            this.cboImageDisplay.setEnabled(!scriptMode);
            this.cboRandomize.setEnabled(!scriptMode);
            this.cboShowImageWithName.setEnabled(!scriptMode);
            this.jSlider1.setEnabled(!scriptMode);
//            tfDelayTime.setEnabled(!scriptMode);
//            tfPause.setEnabled(!scriptMode);
//            chkRandomize.setEnabled(false);
//            chkAutoImageDisplay.setEnabled(false);
           
//        }
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        B_continue = new javax.swing.JButton();
        B_quit = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        cboRandomize = new javax.swing.JComboBox();
        cboImageDisplay = new javax.swing.JComboBox();
        cboShowImageWithName = new javax.swing.JComboBox();
        ckShowFamily = new javax.swing.JCheckBox();
        ckKeyPress = new javax.swing.JCheckBox();
        jPanel2 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jSlider1 = new javax.swing.JSlider();
        jLabel1 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabelDelay = new javax.swing.JLabel();

        setTitle("Study Options");
        setResizable(false);

        B_continue.setText("Continue");
        B_continue.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                B_continueKeyPressed(evt);
            }
        });
        B_continue.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                B_continueMouseReleased(evt);
            }
        });

        B_quit.setText("Cancel");
        B_quit.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                B_quitKeyPressed(evt);
            }
        });
        B_quit.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                B_quitMouseReleased(evt);
            }
        });

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(), "Mode / Settings", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 11))); // NOI18N

        cboRandomize.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Alphabetical Order", "Randomize" }));

        cboImageDisplay.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Use Arrow Keys", "Auto Image Display" }));
        cboImageDisplay.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cboImageDisplayActionPerformed(evt);
            }
        });

        cboShowImageWithName.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Show Image Only", "Show Image With Name" }));
        cboShowImageWithName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cboShowImageWithNameActionPerformed(evt);
            }
        });

        ckShowFamily.setText("Show Family Name");
        ckShowFamily.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        ckShowFamily.setEnabled(false);
        ckShowFamily.setMargin(new java.awt.Insets(0, 0, 0, 0));

        ckKeyPress.setText("Stop until key press");
        ckKeyPress.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        ckKeyPress.setEnabled(false);
        ckKeyPress.setMargin(new java.awt.Insets(0, 0, 0, 0));

        org.jdesktop.layout.GroupLayout jPanel1Layout = new org.jdesktop.layout.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel1Layout.createSequentialGroup()
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(org.jdesktop.layout.GroupLayout.TRAILING, cboRandomize, 0, 272, Short.MAX_VALUE)
                            .add(org.jdesktop.layout.GroupLayout.TRAILING, cboShowImageWithName, 0, 272, Short.MAX_VALUE)))
                    .add(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .add(cboImageDisplay, 0, 272, Short.MAX_VALUE))
                    .add(jPanel1Layout.createSequentialGroup()
                        .add(80, 80, 80)
                        .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(ckShowFamily)
                            .add(ckKeyPress))))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .add(cboRandomize, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(32, 32, 32)
                .add(cboImageDisplay, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(33, 33, 33)
                .add(cboShowImageWithName, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, 18, Short.MAX_VALUE)
                .add(ckShowFamily)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(ckKeyPress)
                .addContainerGap())
        );

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(), "Speed", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 11))); // NOI18N

        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setText("Image Display Time (0.5 - 4 seconds)");

        jSlider1.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jSlider1StateChanged(evt);
            }
        });

        jLabel1.setText("Less");

        jLabel3.setText("More");

        jLabel4.setText("seconds");

        jLabelDelay.setText("4.0");

        org.jdesktop.layout.GroupLayout jPanel2Layout = new org.jdesktop.layout.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                    .add(org.jdesktop.layout.GroupLayout.LEADING, jLabel2, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 266, Short.MAX_VALUE)
                    .add(jPanel2Layout.createSequentialGroup()
                        .add(jLabelDelay)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(jLabel4)
                        .add(85, 85, 85))
                    .add(jPanel2Layout.createSequentialGroup()
                        .add(jLabel1)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                        .add(jSlider1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 197, Short.MAX_VALUE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(jLabel3)))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, jPanel2Layout.createSequentialGroup()
                .add(jLabel2)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, jPanel2Layout.createSequentialGroup()
                        .add(jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(jLabel1)
                            .add(jSlider1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, 8, Short.MAX_VALUE)
                        .add(jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                            .add(jLabel4)
                            .add(jLabelDelay))
                        .add(11, 11, 11))
                    .add(jLabel3)))
        );

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                .add(47, 47, 47)
                .add(B_continue)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, 96, Short.MAX_VALUE)
                .add(B_quit, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 79, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(35, 35, 35))
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel2, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(B_quit, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 34, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(B_continue, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 34, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jSlider1StateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jSlider1StateChanged
        double temp = jSlider1.getValue() * .1;
        String temps = String.valueOf(temp);
        jLabelDelay.setText(String.valueOf(temps.toCharArray(), 0, 3));// TODO add your handling code here:
    }//GEN-LAST:event_jSlider1StateChanged
 
    private void B_quitKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_B_quitKeyPressed
            this.hide();
    }//GEN-LAST:event_B_quitKeyPressed

    private void B_continueKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_B_continueKeyPressed
//   double testDelay = Double.parseDouble(tfDelayTime.getText());
//        double tmpPause = Double.parseDouble(tfPause.getText());
        
//        if(testDelay < 0.1 || testDelay > 4){
//            JOptionPane.showMessageDialog(this, "The Delay time must be between 0.1 and 4 seconds!");
//            tfDelayTime.setText("1.0");
//            return;
//        }
        
//        if(tmpPause < 0.5 || tmpPause > 5.0){
//            JOptionPane.showMessageDialog(this, "The Pause time must be between 0.5 and 5 seconds!");
//            tfPause.setText("0.5");
//            return;
//        }
        mDelay = jSlider1.getValue() * .1; 
        mContinue = true;
        this.hide();
    }//GEN-LAST:event_B_continueKeyPressed
   
    private boolean enableShowFamily(){
           if(mTaxaLevel.compareTo("Family") != 0){ // Family is NOT selected
             
             if(cboImageDisplay.getSelectedIndex() == 1){
                 return true;
             }
             else if(this.cboShowImageWithName.getSelectedIndex() == 1){
                 return true;
             }   
         }
       
               return false;
    }
    
    private void cboShowImageWithNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cboShowImageWithNameActionPerformed
         
        ckShowFamily.setEnabled(enableShowFamily());
        if(cboImageDisplay.getSelectedIndex() == 1 && cboShowImageWithName.getSelectedIndex() == 0){
            ckKeyPress.setEnabled(true);
        }
        else
            ckKeyPress.setEnabled(false);
        
              
    }//GEN-LAST:event_cboShowImageWithNameActionPerformed

    private void cboImageDisplayActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cboImageDisplayActionPerformed
// TODO add your handling code here:
        ckShowFamily.setEnabled(enableShowFamily());
        cboShowImageWithName.removeAllItems();
        if(cboImageDisplay.getSelectedIndex() == 1){
        
            
            if(cboShowImageWithName.getSelectedIndex() == 0){
            ckKeyPress.setEnabled(true);
        }
        else
            ckKeyPress.setEnabled(false);
            
            
            
            
                this.jSlider1.setEnabled(true);
//            this.tfDelayTime.setEnabled(true);
//            tfDelayTime.setEditable(true);
//            this.tfPause.setEnabled(true);
//            tfPause.setEditable(true);
            cboShowImageWithName.addItem("Show Name After Image");
            cboShowImageWithName.addItem("Show Name With Image");
        }
        else
        {
            this.jSlider1.setEnabled(false);
//            this.tfDelayTime.setEnabled(false);
//            tfDelayTime.setEditable(false);
//            this.tfPause.setEnabled(false);
//            tfPause.setEditable(false);
            cboShowImageWithName.addItem("Show Image Only");
            cboShowImageWithName.addItem("Show Image With Name");
            ckKeyPress.setEnabled(false);
        }
        
    }//GEN-LAST:event_cboImageDisplayActionPerformed

    private void B_quitMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_B_quitMouseReleased
// TODO add your handling code here:
        //result = 0;
        this.hide();
    }//GEN-LAST:event_B_quitMouseReleased

    private void B_continueMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_B_continueMouseReleased
// TODO add your handling code here:
//        double testDelay = Double.parseDouble(tfDelayTime.getText());
//        double tmpPause = Double.parseDouble(tfPause.getText());
        
//        if(testDelay < 0.1 || testDelay > 4){
//            JOptionPane.showMessageDialog(this, "The Delay time must be between 0.1 and 4 seconds!");
//            tfDelayTime.setText("1.0");
//            return;
//        }
        
//        if(tmpPause < 0.5 || tmpPause > 5.0){
//            JOptionPane.showMessageDialog(this, "The Pause time must be between 0.5 and 5 seconds!");
//            tfPause.setText("0.5");
//            return;
//        }
         mDelay = jSlider1.getValue() * .1; 
        mContinue = true;
        this.hide();
    }//GEN-LAST:event_B_continueMouseReleased
    
    public boolean getContinue(){
        return mContinue;
    }
    
    public double getDelayTimeStudy(){
        return this.jSlider1.getValue() * .1;//Double.parseDouble(tfDelayTime.getText());
    }
    
    public boolean getShowFamilyName(){
        
        if(ckShowFamily.isSelected() && ckShowFamily.isEnabled())
        {
            return true;
        }
        else
            return false;
        
    }
    
    public boolean getRandomize(){
//        return chkRandomize.isSelected();
         return (((String)cboRandomize.getSelectedItem()).compareTo("Randomize") == 0);
    }
    
    public boolean getKeyPress(){
        if(ckKeyPress.isSelected() && ckKeyPress.isEnabled())
            return true;
        else
            return false;
    }
    
    public void setRandomize(boolean rand){
//        chkRandomize.setSelected(rand);
        if(rand)
            cboRandomize.setSelectedIndex(1);
        else
            cboRandomize.setSelectedIndex(0);
    }
    
    public boolean getAutoImageDisplay(){
//        return chkAutoImageDisplay.isSelected();
        return (((String)cboImageDisplay.getSelectedItem()).compareTo("Auto Image Display") == 0);
    }
          
    public void setAutoImageDisplay(boolean aid){
//        chkAutoImageDisplay.setSelected(aid);
        if(aid)
            cboImageDisplay.setSelectedIndex(1);
        else
            cboImageDisplay.setSelectedIndex(0);

    }
    
   
    
    public boolean getShowImageWithName(){
        return (cboShowImageWithName.getSelectedIndex() == 1);
    }
    
    public void setShowImageWithName(boolean siwn){
       // chkShowNameWithImage.setEnabled(this.chkAutoImageDisplay.isSelected() && !mRunMode && !mScriptMode);
//        if(getAutoImageDisplay()){
//             jLabel5.setText("Show names with image. (default after image)");
//        }
//       chkNameWithImage.setSelected(siwn);
        if(siwn)
            cboShowImageWithName.setSelectedIndex(1);
        else
            cboShowImageWithName.setSelectedIndex(0);
    }
    public static void addEscapeListener(final JDialog dialog) { 
    ActionListener escListener = new ActionListener() { 
        @Override       
        public void actionPerformed(ActionEvent e) { 
         
            dialog.setVisible(false);        }    }; 
    dialog.getRootPane().registerKeyboardAction(escListener,KeyStroke.getKeyStroke(KeyEvent.VK_ESCAPE, 0),JComponent.WHEN_IN_FOCUSED_WINDOW);
}
     
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton B_continue;
    private javax.swing.JButton B_quit;
    private javax.swing.JComboBox cboImageDisplay;
    private javax.swing.JComboBox cboRandomize;
    private javax.swing.JComboBox cboShowImageWithName;
    private javax.swing.JCheckBox ckKeyPress;
    private javax.swing.JCheckBox ckShowFamily;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabelDelay;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JSlider jSlider1;
    // End of variables declaration//GEN-END:variables
    
}
